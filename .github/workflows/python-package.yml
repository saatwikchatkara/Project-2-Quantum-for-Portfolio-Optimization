# .github/workflows/python-package.yml

name: Python Package CI/CD

on:
  push:
    branches: [ "main", "master" ] # Triggers the workflow on push to main or master branch
  pull_request:
    branches: [ "main", "master" ] # Triggers the workflow on pull request to main or master branch
  workflow_dispatch: # Allows you to run the workflow manually from the GitHub Actions tab

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Specify the operating system for the job

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"] # Test against multiple Python versions

    steps:
    - name: Checkout repository # Step 1: Clone the repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} # Step 2: Set up Python environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Cache pip dependencies for faster builds

    - name: Install dependencies # Step 3: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        # Install core dependencies. Add any specific versions if necessary.
        pip install yfinance pandas numpy matplotlib scikit-learn pennylane pennylane-lightning
        # If your project has a requirements.txt file, use:
        # pip install -r requirements.txt
        # If your project is a package, you might install it in editable mode:
        # pip install -e .

    # - name: Run linting (optional, if you have linting tools like Flake8, Black)
    #   run: |
    #     pip install flake8
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 1-indexed.
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run tests # Step 4: Run your tests (e.g., using pytest)
      run: |
        # If you have a 'tests/' directory with pytest, install pytest:
        # pip install pytest
        # pytest
        # Replace the above with your actual test command.
        # For this project, you might run a small subset of the main script
        # if you don't have dedicated unit tests.
        # Example: Run a very quick check on the data loading and a minimal QAOA setup
        # Note: This is NOT ideal for robust testing, but a placeholder if no unit tests exist.
        echo "No dedicated unit tests found. Skipping test execution."
        echo "Consider adding unit tests for functions like build_qaoa_cost_hamiltonian, calculate_portfolio_metrics."
        # As a very minimal "check," you could try running a small part of your script:
        # python -c "import yfinance as yf; import pandas as pd; data = yf.download('VOO', start='2022-01-01', end='2022-01-05', auto_adjust=True); print(data.head())"

  # deploy: # Optional: Job for deploying your package to PyPI or similar
  #   needs: build_and_test # This job runs only after build_and_test is successful
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Deploy only on push to main
  #   runs-on: ubuntu-latest
  #   environment: release # Optional: Specify an environment for secrets management
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: '3.x' # Use a specific stable version for deployment
  #
  #   - name: Install build tools
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel twine
  #
  #   - name: Build and publish
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Store your PyPI token in GitHub Secrets
  #     run: |
  #       python setup.py sdist bdist_wheel
  #       twine upload dist/*
